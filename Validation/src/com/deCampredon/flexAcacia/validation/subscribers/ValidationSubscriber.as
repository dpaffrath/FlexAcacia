/*
* Copyright 2009 François de Campredon
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*      http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

package com.deCampredon.flexAcacia.validation.subscribers
{
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.events.IEventDispatcher;
	
	import mx.events.FlexEvent;
	import mx.events.ValidationResultEvent;
	import mx.validators.IValidatorListener;
	import mx.validators.ValidationResult;
	import com.deCampredon.flexAcacia.validation.core.ValidationModel;
	import com.deCampredon.flexAcacia.validation.core.ValidationSession;
	
	/**
	 * the ValidationSubscriber class is responsible for connecting UI to ValidationModel
	 * By using the <code>IValidatorLister</code> Interface.
	 *  
	 * @author François de Campredon
	 */
	public class ValidationSubscriber extends EventDispatcher
	{
		/**
		 * Constructor
		 */	
		public function ValidationSubscriber()
		{
			super();
		}
		
		
		//--------------------------------------------------------------------------
		//
		//  Properties
		//
		//--------------------------------------------------------------------------
		
		
		//----------------------------------
		//  validator
		//----------------------------------
		
		/**
		 * the validator used to create appropriate validation session
		 */		
		public var validationModel:ValidationModel;
		
		//----------------------------------
		//  source
		//----------------------------------
		
		/**
		 * @private
		 */	
		private var _source:IValidatorListener;

		/**
		 * Specifies the <code>IValidatorListener</code> Object that should receive 
		 * <code>ValidationResultEvent</code> generated by this Component
		 * if the <code>trigger</code> property is null, and if that Object implment the 
		 * <code>IEventDispatcher</code> interface, that object will also be used as trigger
		 * for validation.
		 */	
		public function get source():IValidatorListener
		{
			return _source;
		}

		/**
		 * @private
		 */	
		public function set source(value:IValidatorListener):void
		{
			if( _source !== value)
			{
				_source = value;
				updateListerner();
			}
		}
		
		
		//----------------------------------
		//  target
		//----------------------------------
				
		private var _target:Object;
		
		/**
		 * Validation target
		 */	
		public function get target():Object
		{
			return _target;
		}

		/**
		 * @private
		 */	
		public function set target(value:Object):void
		{
			if( _target !== value)
			{
				_target = value;
				updateListerner();
			}
		}

		//----------------------------------
		// fields
		//----------------------------------
		/**
		 * Specifies the set of fields used for the validation
		 */	
		public var fields:Array;		
		
		//----------------------------------
		// groups
		//----------------------------------
		
		/**
		  * Specifies the set of groups used for the validation
		 */	
		public var groups:Array;
		
		//----------------------------------
		//  triggerEvent
		//----------------------------------
		
		/**
		 * @private
		 */
		private var _triggerEvent:String = FlexEvent.VALUE_COMMIT;

		
		/**
		 * Specifies the event that triggers the validation. 
		 */	
		public function get triggerEvent():String
		{
			return _triggerEvent;
		}

		public function set triggerEvent(value:String):void
		{
			if( _triggerEvent !== value)
			{
				_triggerEvent = value;
				if(!_triggerEvent){
					_triggerEvent = FlexEvent.VALUE_COMMIT;
				}
				updateListerner();
			}
		}

		//----------------------------------
		//  trigger
		//----------------------------------
		
		/**
		 * @private
		 */
		private var _trigger:IEventDispatcher;

		/**
		 * Specifies the component generating the event that triggers the validation. 
	     * If omitted, the <code>source</code> object is used instead.
		 */	
		public function get trigger():IEventDispatcher
		{
			return _trigger;
		}

		public function set trigger(value:IEventDispatcher):void
		{
			if( _trigger !== value)
			{
				_trigger = value;
				updateListerner();
			}
		}
		
		//--------------------------------------------------------------------------
		//
		//  Methods
		//
		//--------------------------------------------------------------------------
		
		/**
		 * start the validation over the <code>target</code> object, with subset of constraint attached 
		 * to the <code>fields</code> and <code>groups</code> properties, ValidationResultEvent will be 
		 * handled by the <code>validationResultHandler</code> method.
		 */
		public function validate(event:Event=null):void {
			if(validationModel && target && source) {
				const fields:Array = this.fields?this.fields:(source.validationSubField?source.validationSubField.split(","):null);
				if((fields && fields.length!=0) || groups) {
					var validationSession:ValidationSession  = validationModel.newValidationSession(target,fields,groups);
					validationSession.addEventListener(ValidationResultEvent.VALID,validationResultHandler);
					validationSession.addEventListener(ValidationResultEvent.INVALID,validationResultHandler);
					validationSession.startValidation();
				}
			}
		}
		
		//--------------------------------------------------------------------------
		//
		//  Event handling
		//
		//--------------------------------------------------------------------------
		
		/**
		 * handle ValidationResult Event, by passing the result to the <code>source</code>
		 */
		protected function validationResultHandler(event:ValidationResultEvent):void {
			IEventDispatcher(event.currentTarget).removeEventListener(ValidationResultEvent.VALID,validationResultHandler);
			IEventDispatcher(event.currentTarget).removeEventListener(ValidationResultEvent.VALID,validationResultHandler);
			var errorMessage:String;
			if(event.results && event.results.length>0) {
				errorMessage = event.message;
			}
			if(source){
				var result:ValidationResult = new ValidationResult(event.type == ValidationResultEvent.INVALID,source.validationSubField,"",errorMessage) ;
				source.validationResultHandler(new ValidationResultEvent(event.type,false,false,source.validationSubField,[result]));
			}
		}
		
		//--------------------------------------------------------------------------
		//
		//  Private Methods
		//
		//--------------------------------------------------------------------------
		
		/**
		 * @private
		 */
		private var lastTrigger:IEventDispatcher;
		/**
		 * @private
		 */
		private var lastTriggerEvent:String;
		
		/**
		 * @private
		 */
		private function updateListerner():void {
			if(lastTrigger && lastTriggerEvent) {
				lastTrigger.removeEventListener(lastTriggerEvent,validate);
			}
			
			lastTrigger = trigger;
			if(!lastTrigger && source && source is IEventDispatcher) {
				lastTrigger = source as IEventDispatcher;
			}
			
			lastTriggerEvent = triggerEvent;
			if(lastTrigger && triggerEvent) {
				lastTrigger.addEventListener(lastTriggerEvent,validate);
			}
		}
		
	}
}